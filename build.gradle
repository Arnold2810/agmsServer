buildscript {
	ext {
		springBootVersion = '3.1.5'	// spring boot 버전 확인
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.spring.gradle:dependency-management-plugin:1.1.3"	// gradle 버전 확인
	}
}

/* 전체 프로젝트 내 전체 모듈 공통설정 */
allprojects {
	// root 프로젝트까지 설정이 필요한 경우 사용

}

// 하위 모든 프로젝트 공통 세팅
subprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group 'kr.co.uxn' // 모듈 생성시 입력해주었던 이름 입력! 입력 안하고 생성했다면 com.example 임
	version '1.0.0-SNAPSHOT'

	sourceCompatibility = '17'	// 루트 모듈 생성시 선택했던 java 버전 입력
	targetCompatibility = '17'	//               "
	compileJava.options.encoding = 'UTF-8'

	repositories {
		mavenCentral()
	}

	// 하위 모듈에서 공통으로 사용하는 세팅 추가.
	// 루트 모듈 생성시 추가해주었던 종속성 항목들을 가져와 입력하면 된다.
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

		// mail
		implementation 'org.springframework.boot:spring-boot-starter-mail'

		//lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		//DB
		runtimeOnly 'org.postgresql:postgresql'
//		runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
//		runtimeOnly 'mysql:mysql-connector-java'
//    implementation 'com.h2database:h2'

		// Swagger
//		implementation("io.springfox:springfox-swagger-ui:2.9.2")
//		implementation("io.springfox:springfox-swagger2:2.9.2")

		// jwt
//		implementation('com.auth0:java-jwt:3.19.2') // oauth
		implementation('io.jsonwebtoken:jjwt:0.9.1') // okta

		implementation group: 'com.opencsv', name: 'opencsv', version: '5.3'
	}

	tasks.named('bootBuildImage') {
		builder = 'paketobuildpacks/builder-jammy-base:latest'
	}

	test {
		useJUnitPlatform()
	}
}

// 공통으로 사용될 파일을 저장 할 agmsCommon 모듈 설정
// bootJar 는  Spring Boot 애플리케이션을 실행 가능한 JAR 파일로 패키징할지 여부를 설정한다.
// 이 값이 false 이면, 해당 모듈은 Spring Boot 애플리케이션을 실행 가능한 JAR 파일로 패키징하지 않는다.
// jar 는 해당 모듈을 일반적인 JAR 파일로 패키징할지 여부를 설정한다.
project(':agmsCommon') {

	bootJar { enabled = false } // 공통 모듈은 bootJar 로 패키징 할 필요 없음
	jar { enabled = true }

	dependencies {
	}
}
// agmsCommon 모듈은
// Spring Boot 애플리케이션으로 실행 가능한 JAR 파일로 패키징하지 않고,
// 일반적인 JAR 파일로 패키징된다.

// agmsService 모듈 설정
project(':agmsService') {

	bootJar { enabled = true }
	jar { enabled = false }

	dependencies {
		implementation project(':agmsCommon') // 컴파일 시 agmsCommon project 로딩! agmsCommon 모듈에 의존성이 생긴다.

		// 이하 agmsService 에서만 사용할 종속성 추가
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
		runtimeOnly 'org.postgresql:postgresql'

	}
}
// agmsService 모듈은
// Spring Boot 애플리케이션으로 실행 가능한 JAR 파일로 패키징 하고,
// 일반적인 JAR 파일로 패키징하지 않는다.